// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Square/SquareGame.jack
/**
 * Implements the Square game.
 * This simple game allows the user to move a black square around
 * the screen, and change the square's size during the movement.
 * When the game starts, a square of 30 by 30 pixels is shown at the
 * top-left corner of the screen. The user controls the square as follows.
 * The 4 arrow keys are used to move the square up, down, left, and right.
 * The 'z' and 'x' keys are used, respectively, to decrement and increment
 * the square's size. The 'q' key is used to quit the game.
 */
class SquareGame {
   field Square square; // the square of this game
   field int direction; // the square's current direction: 
                        // 0=none, 1=up, 2=down, 3=left, 4=right

   field Gameboard board; // This is the game board 
   field Ball ball; 

   /** Constructs a new square game. */
   constructor SquareGame new() {
      // The initial square is located in (0,0), has size 30, and is not moving.
      let square = Square.new(255, 225, 30, 1);
      let board = Gameboard.new(512,256); 
      let ball = Ball.new(256, 200, 10);  // x, y, size
      let direction = 0;
      do board.draw(); // Here we draw the board 
      do ball.draw(); // Here we draw the ball 
      return this;
   }

   /** Disposes this game. */
   method void dispose() {
      do board.dispose(); 
      do square.dispose();
      do Memory.deAlloc(this);
      return;
   }

   /** Moves the square in the current direction. */
   method void moveSquare() {
      //if (direction = 1) { do square.moveUp(); }
      //if (direction = 2) { do square.moveDown(); }
      if (direction = 3) { do square.moveLeft(); }
      if (direction = 4) { do square.moveRight(); }
      do Sys.wait(5);  // delays the next movement
      return;  
   }
   //A small change for testing

   /** Runs the game: handles the user's inputs and moves the square accordingly */
   method void run() {
      var char key;
      var boolean exit;
      var boolean ballLost;
      var int lives;
      var boolean lose; 
      let lives = 3;
      let exit = false;
      


      while (~exit) {
         let key = Keyboard.keyPressed();  // Read key once per frame
         
         // Process game logic
         do moveSquare();
         do ball.move();
         do Output.moveCursor(0, 0);
         do Output.printInt(lives);
         let ballLost = board.checkBallCollisions(ball, square);
         
         // Handle ball loss
         if (ballLost) {
               do ball.erase();
               let ball = Ball.new(256, 200, 10);
               do ball.draw();
               let lives = lives - 1;
               
               // Check for game over
               if (lives < 1) {
                  let lose = true; 
                  let exit = true;
               }
               
               // Update lives display
               do Output.moveCursor(0, 0);
               do Output.printString(" ");  // Clear previous
               do Output.moveCursor(0, 0);
               do Output.printInt(lives);
         }
         
         // Check for win condition
         if (board.getNumerObstacle() = 0) {
               let lose = false; 
               let exit = true;
               do Output.moveCursor( 16 , 32); 
               do Output.printString("Ganaste!!");
               do Output.moveCursor(0,0); 

         }
         
         // Handle input
         if (key = 81)  { let exit = true; }     // q key - quit
         if (key = 130) { let direction = 3; }   // left arrow
         if (key = 132) { let direction = 4; }   // right arrow
         
         
         
      } // while exit
      
      // Game over cleanup
      if (lose){
         do Output.moveCursor( 16 ,32); 
         do Output.printString("Perdiste!!");
         do Output.moveCursor(0,0); 
      }
      
      return;
   }
}



