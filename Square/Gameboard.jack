class Gameboard {
    field Square topWall, leftWall, rightWall;
    field int screenWidth, screenHeight, type;
    field Array obstacles;
    field int obstacleCount;
    
    constructor Gameboard new(int width, int height) {
        let screenWidth = width;
        let screenHeight = height;
        
        // Adjust coordenates to be inside of 0-511, 0-255
        let topWall = Square.new(0, 0, 1, 1);
        let leftWall = Square.new(0, 0, 1, 1 );
        let rightWall = Square.new(width - 11, 0, 1, 1);   // 502 for width=512
        let type = 1; //This will help us on colitions

        // Create obstacles 

        let obstacleCount = 12;
        let obstacles = Array.new(obstacleCount);
        do createObstacles();
        return this;
    }
    
    method void dispose() {
        do topWall.dispose();
        do leftWall.dispose();
        do rightWall.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void createObstacles() {
        var int i, j, x, y, index;
        let i = 0;
        let j = 0;
        let y = 50; // Initial row
        
        // 3 rows of 4 obstacles
        while (j < 3) {
            let i = 0;
            let x = 80; // Initial column 
            
            while (i < 4) {
                let index = (j * 4) + i;
                let obstacles[index] = Obstacle.new(x, y, 8);
                let x = x + 100; // space between obstacles
                let i = i + 1;
            }
            
            let y = y + 30; // space between rows
            let j = j + 1;
        }
        return;
    }
    
    method void draw() {
        // Adjust dimentions for been on screen
        var int adjustedWidth;
        var int adjustedHeight;
        
        // top wall - height 10px
        let adjustedWidth = screenWidth - 1;  // 511 instead of  512
        do topWall.drawWall(adjustedWidth, 10);
        do Sys.wait(1000);
        


        // left wall - width 10px
        let adjustedHeight = screenHeight - 1; // 255 instead of 256
        do leftWall.drawWall(10, adjustedHeight);
        do Sys.wait(1000);

        // right wall - width 10px, 
        do rightWall.drawWall(10, adjustedHeight);
        do Sys.wait(1000);

        return;
    }

    method boolean checkBallCollisions(Ball ball, Square paddle) {
        var int ballLeft, ballRight, ballTop, ballBottom;
        var int paddleLeft, paddleRight, paddleTop, paddleBottom;
        var int fakeCounter; 
        
        let ballLeft = ball.getLeft();
        let ballRight = ball.getRight();
        let ballTop = ball.getTop();
        let ballBottom = ball.getBottom();
        
        let paddleLeft = paddle.getX();
        let paddleRight = paddle.getX() + (paddle.getSize() * 4);
        let paddleTop = paddle.getY();
        let paddleBottom = paddle.getY() + (paddle.getSize() / 2);
        
        // Collisions with paddle 
        if (~(ballBottom < paddleTop)) {
            if (~(ballTop > paddleBottom)) {
                if (~(ballRight < paddleLeft)) {
                    if (~(ballLeft > paddleRight)) {
                        do ball.bounceY();
                        return false;
                    }
                }
            }
        }

        let fakeCounter =  checkObstacleCollisions(ball);
        
        // Collitions with top wall
        if (~(ballTop > 10)) {
            do ball.bounceY();
        }
        
        // Collitions with left wall
        if (~(ballLeft > 10)) {
            do ball.bounceX();
        }
        
        // CCollitions with right wall
        if (~(ballRight < 500)) {
            do ball.bounceX();
        }
        
        // Lose Ball
        if (~(ballBottom < 245)) {
            return true;
        }
        
        return false;
    }

    method int checkObstacleCollisions(Ball ball) {
        var int i;
        var boolean isActive; 
        var int obsLeft, obsRight, obsTop, obsBottom;
        var int ballLeft, ballRight, ballTop, ballBottom;
        var Obstacle currentObstacle;
        var Square obstacleSquare;
        var int counter; 
        let counter = 12;
        
        let i = 0;
        
        while (i < obstacleCount) {
            let currentObstacle = obstacles[i];
            let isActive = currentObstacle.isActive(); 
            
            if (isActive) {
                let obstacleSquare = currentObstacle.getSquare();
                
                let ballLeft = ball.getLeft();
                let ballRight = ball.getRight();
                let ballTop = ball.getTop();
                let ballBottom = ball.getBottom();
                
                let obsLeft = obstacleSquare.getX();
                let obsRight = obstacleSquare.getX() + (obstacleSquare.getSize() * 4);
                let obsTop = obstacleSquare.getY();
                let obsBottom = obstacleSquare.getY() + (obstacleSquare.getSize() / 2);
                
                // Detect collisions with obstacle
                if (ballBottom > obsTop) {
                    if (ballTop < obsBottom) {
                        if (ballRight > obsLeft) {
                            if (ballLeft < obsRight) {
                                // Destroy obstacle and bounce
                                do currentObstacle.destroy();
                                let counter = counter -1; 
                                do ball.bounceY();
                            }
                        }
                    }
                }
            }
            let i = i + 1;
        }
        return counter;
    }
}